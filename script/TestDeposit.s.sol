// SPDX-License-Identifier: AGPL-3.0
pragma solidity ^0.8.13;

import "forge-std/console2.sol";

import {CREATE3Script} from "./base/CREATE3Script.sol";

import {BunniQuoter} from "../src/periphery/BunniQuoter.sol";
import {Currency} from "@uniswap/v4-core/src/types/Currency.sol";
import {PoolKey} from "@uniswap/v4-core/src/types/PoolKey.sol";
import {IHooks} from "@uniswap/v4-core/src/interfaces/IHooks.sol";
import {IPoolManager} from "@uniswap/v4-core/src/interfaces/IPoolManager.sol";

import {LibString} from "solady/utils/LibString.sol";
import {SafeCastLib} from "solady/utils/SafeCastLib.sol";
import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";

import {BunniHub} from "../src/BunniHub.sol";
import {WETH} from "solady/tokens/WETH.sol";
import {IPermit2} from "permit2/src/interfaces/IPermit2.sol";
import {BunniToken} from "../src/BunniToken.sol";
import {IFloodPlain} from "flood-contracts/src/interfaces/IFloodPlain.sol";

import {IBunniHub} from "../src/interfaces/IBunniHub.sol";
import {CarpetedDoubleGeometricDistribution} from "../src/ldf/CarpetedDoubleGeometricDistribution.sol";

contract TestDepositScript is CREATE3Script {
    using LibString for uint256;
    using SafeCastLib for uint256;
    using SafeTransferLib for address;

    constructor() CREATE3Script(vm.envString("VERSION")) {}

    function run() external {
        IPoolManager poolManager = IPoolManager(vm.envAddress(string.concat("POOL_MANAGER_", block.chainid.toString())));
        WETH weth = WETH(payable(vm.envAddress(string.concat("WETH_", block.chainid.toString()))));
        IPermit2 permit2 = IPermit2(vm.envAddress("PERMIT2"));
        address owner = vm.envAddress("OWNER");
        address hookFeeRecipient = vm.envAddress("HOOK_FEE_RECIPIENT");
        uint32 hookFeeModifier = vm.envUint("HOOK_FEE_MODIFIER").toUint32();
        uint32 referralRewardModifier = vm.envUint("REFERRAL_REWARD_MODIFIER").toUint32();
        IFloodPlain floodPlain = IFloodPlain(payable(vm.envAddress("FLOOD_PLAIN")));
        uint48 k = vm.envUint(string.concat("AMAMM_K_", block.chainid.toString())).toUint48();
        vm.warp(1738358453);

        IBunniHub hub = IBunniHub(getCreate3ContractFromEnvSalt("BunniHub"));
        IBunniHub updatedHub = new BunniHub(poolManager, weth, permit2, new BunniToken(), owner, hookFeeRecipient);
        vm.etch(address(hub), address(updatedHub).code);

        address sender = 0x1bfD64aB61EACf714B2Aa37347057203f3AcA71f;

        // approve USDT to hub
        address usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
        vm.prank(sender);
        usdt.safeApprove(address(hub), type(uint256).max);

        address multicaller = 0x00000000002Fd5Aeb385D324B580FCa7c83823A0;
        bytes memory data =
            hex"d985f1e8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000022d473030f116ddee9f6b43ac78ba300000000000000000000000000000059923c01c79958099f9e488cdd4708a6c000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001842b67b5700000000000000000000000001bfd64ab61eacf714b2aa37347057203f3aca71f000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000005f5e0ff00000000000000000000000000000000000000000000000000000000679e8fad000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000059923c01c79958099f9e488cdd4708a6c000000000000000000000000000000000000000000000000000000000679d4c3d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000041f980a76923c52c41d9105a6c2f6bedae107cdd73236d3d384a67fb041946c60244ef0410820b6ebeea84d0fceaf1f0337ff69788a9ddff2b6e01f79b38ef39761b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e4f69da336000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000001f3b9712708127b1fcad61cb8925359518880000000000000000000000001bfd64ab61eacf714b2aa37347057203f3aca71f0000000000000000000000001bfd64ab61eacf714b2aa37347057203f3aca71f0000000000000000000000000000000000000000000000000000000005f5e1000000000000000000000000000000000000000000000000000000000005f5e0ff0000000000000000000000000000000000000000000000000000000005ee3fe00000000000000000000000000000000000000000000000000000000005ee3fdf0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000679d408d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        uint256 gasBefore = gasleft();
        vm.prank(sender);
        multicaller.call(data);
        uint256 gasAfter = gasleft();
        console2.log("gas", gasBefore - gasAfter);
    }
}
